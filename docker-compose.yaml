version: "3.7"

include:
  - ./signoz/docker-compose.yaml

# Shared Postgres Replica configs
x-postgres-common:
  &postgres-common
  image: postgres:14-alpine
  user: postgres
  restart: always
  healthcheck:
    test: 'pg_isready -U postgres --dbname=gs_db'
    interval: 10s
    timeout: 5s
    retries: 5

volumes:
  mongodb_data:
  postgres_primary_data:
  postgres_replica_data:
  redis_data:
  rabbitmq_data:
  rabbitmq_logs:
  clickhouse_data:

services:

### --------------------------------- LOAD BALANCER --------------------------------- ###
  api_gateway:
    hostname: api_gateway
    container_name: api_gateway
    build:
      context: ./gateway
      dockerfile: ./Dockerfile # Using Nginx as Gateway
    ports:
      - ${GATEWAY_HTTP_PORT}:80
      - ${GATEWAY_HTTPS_PORT}:443
### --------------------------------- LOAD BALANCER END --------------------------------- ###

### --------------------------------- MESSAGE BROKER --------------------------------- ###
  event_bus:
    hostname: event_bus
    image: rabbitmq:3-management-alpine
    container_name: "event_bus"
    restart: unless-stopped
    env_file:
      - .env
#    environment:
#      - RABBITMQ_USER=${AMQP_USERNAME}
#      - RABBITMQ_PASSWORD=${AMQP_PASSWORD}
    ports:
      - ${AMQP_PORT}:5672
      - ${AMQP_MANAGER_PORT}:15672
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq/
      - rabbitmq_logs:/var/log/rabbitmq
### --------------------------------- MESSAGE BROKER END --------------------------------- ###

### --------------------------------- STORAGES --------------------------------- ###
  postgres_primary:
    <<: *postgres-common
    hostname: postgres_primary
#    ports:
#      - 5432:5432
    environment:
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST_AUTH_METHOD: "scram-sha-256\nhost replication all 0.0.0.0/0 md5"
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    command: |
      postgres 
      -c wal_level=logical
      -c hot_standby=on 
      -c max_wal_senders=10 
      -c max_replication_slots=10 
      -c hot_standby_feedback=on
    volumes:
      - ./postgres/scripts:/docker-entrypoint-initdb.d
      - postgres_primary_data:/var/lib/postgresql/data

  postgres_replica:
    <<: *postgres-common
    ports:
      - 5433:5432
    environment:
      PGUSER: replicator
      PGPASSWORD: replicator_password
    command: |
      bash -c "
      until pg_basebackup --pgdata=/var/lib/postgresql/data -R --slot=replication_slot --host=postgres_primary --port=5432
      do
      echo 'Waiting for primary to connect...'
      sleep 1s
      done
      echo 'Backup done, starting replica...'
      chmod 0700 /var/lib/postgresql/data
      postgres
      "
    volumes:
      - postgres_replica_data:/var/lib/postgresql/data
    depends_on:
      - postgres_primary

  pgbouncer:
    image: edoburu/pgbouncer
    container_name: pgbouncer
    environment:
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_HOST=postgres_primary
      - AUTH_TYPE=scram-sha-256
      - POOL_MODE=transaction
      - ADMIN_USERS=postgres,dbuser
    ports:
      - 5432:5432
    depends_on:
      - postgres_replica

  wal:
    container_name: wal
    image: ihippik/wal-listener
    volumes:
      - ./postgres/wal/config.yml:/app/config.yml
    depends_on:
      - postgres_primary
      - event_bus

  mongodb:
    image: mongo
    hostname: mongodb
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - MONGO_INITDB_DATABASE=${MONGODB_NAME}
      - MONGO_INITDB_ROOT_USERNAME=${MONGODB_ROOT_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_ROOT_PASS}
    ports:
      - ${MONGODB_PORT}:27017
    volumes:
      - mongodb_data:/data/db
    healthcheck:
      test: echo 'db.stats().ok' | mongosh localhost:27017/test --quiet
### --------------------------------- STORAGES END --------------------------------- ###

### --------------------------------- CACHE --------------------------------- ###
  redis:
    image: redis:alpine
    restart: always
    command: redis-server --appendonly yes
    env_file:
      - .env
    volumes:
      - redis_data:/data
    ports:
      - ${REDIS_PORT}:6379
### --------------------------------- CACHE END --------------------------------- ###

### --------------------------------- S3 --------------------------------- ###
  minio:
    image: minio/minio:RELEASE.2024-01-13T07-53-03Z
    hostname: minio
    volumes:
      - /minio/data/minio/export:/minio/export
    ports:
      - ${MINIO_API_PORT}:9000
      - ${MINIO_CONSOLE_PORT}:38343
    command: server /minio/export --console-address=0.0.0.0:38343
    environment:
      - MINIO_DISTRIBUTED_MODE_ENABLED=no
      - MINIO_ROOT_USER=minio
      - MINIO_ROOT_PASSWORD=rootroot
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://127.0.0.1:9000/minio/health/live" ]
      interval: 30s
      timeout: 20s
      retries: 3
### --------------------------------- S3 END --------------------------------- ###

### --------------------------------- CLICKHOUSE --------------------------------- ###
  zookeeper:
    image: bitnami/zookeeper:3.7.1
    container_name: zookeeper
    hostname: zookeeper
    user: root
    ports:
      - "2181:2181"
      - "2888:2888"
      - "3888:3888"
    volumes:
      - ./clickhouse/data/zookeeper:/bitnami/zookeeper
    environment:
      - ZOO_SERVER_ID=1
      - ALLOW_ANONYMOUS_LOGIN=yes
      - ZOO_AUTOPURGE_INTERVAL=1

  clickhouse:
    image: clickhouse/clickhouse-server:23.11.1-alpine
    container_name: clickhouse
    hostname: clickhouse
    ports:
      - "9000:9000"
      - "8123:8123"
      - "9181:9181"
    volumes:
      - ./clickhouse/clickhouse-config.xml:/etc/clickhouse-server/config.xml
      - ./clickhouse/clickhouse-users.xml:/etc/clickhouse-server/users.xml
      - ./clickhouse/custom-function.xml:/etc/clickhouse-server/custom-function.xml
      - ./clickhouse/clickhouse-cluster.xml:/etc/clickhouse-server/config.d/cluster.xml
      # - ./clickhouse/clickhouse-storage.xml:/etc/clickhouse-server/config.d/storage.xml
      - clickhouse_data:/var/lib/clickhouse/
      - ./clickhouse/user_scripts:/var/lib/clickhouse/user_scripts/
    restart: on-failure
    tty: true
    depends_on:
      - zookeeper
    logging:
      options:
        max-size: 50m
        max-file: "3"
    healthcheck:
      # "clickhouse", "client", "-u ${CLICKHOUSE_USER}", "--password ${CLICKHOUSE_PASSWORD}", "-q 'SELECT 1'"
      test:
        [
          "CMD",
          "wget",
          "--spider",
          "-q",
          "localhost:8123/ping"
        ]
      interval: 30s
      timeout: 5s
      retries: 3
    ulimits:
      nproc: 65535
      nofile:
        soft: 262144
        hard: 262144
### --------------------------------- CLICKHOUSE END --------------------------------- ###

### --------------------------------- MOCK SERVICES --------------------------------- ###
  maildev:
    image: axllent/mailpit
    container_name: gmaildev
    hostname: gmaildev
    restart: on-failure
    volumes:
      - ./maildev/data:/data
      - ./maildev/cert:/cert
    environment:
      - MP_SMTP_TLS_REQUIRED=false
      - MP_SMTP_AUTH_ACCEPT_ANY=1
      - MP_SMTP_AUTH_ALLOW_INSECURE=1
      - MP_MAX_MESSAGES=5000
      - MP_DATABASE=/data/mailpit.db
    ports:
      - 8025:8025
      - 1025:1025

### --------------------------------- MOCK SERVICES END --------------------------------- ###
